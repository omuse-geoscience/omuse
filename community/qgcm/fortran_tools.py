# ptype:
# simple: rw, scalar value and implementation generated by interface
# normal: rw, scalar value, custom implementation 
# ro: read only, scalar value, generated 
# vector: rw, generated vector valued

class FortranCodeGenerator(object):
    _getter_string="""
      function get_{0}(x) result(ret)
        integer :: ret
        {1} :: x
        x={0}
        ret=0
      end function
                   """
    _setter_string="""
      function set_{0}(x) result(ret)
      integer :: ret
        {1} :: x
        {0}=x
        ret=0
      end function
                   """
    
    _vector_getter_string="""
      function get_{0}(i,x) result(ret)
        integer :: i,ret
        {1} :: x
        x={0}(i)
        ret=0
      end function
                   """
    _vector_setter_string="""
      function set_{0}(i,x) result(ret)
      integer :: i,ret
        {1} :: x
        {0}(i)=x
        ret=0
      end function
                   """

    def __init__(self,parameter_definition):
        self.parameter_definition=parameter_definition

    def parameter_getter_setters(self):
        filestring=""
        py_to_f={"string" : "character(len=*) ", "float64" : "real*8", "float32" : "real", "int32" : "integer", "bool" : "logical"}
        for par,d in self.parameter_definition.iteritems():
          if d["ptype"] in ["ro"]:
            filestring+=self._getter_string.format(d["short"],py_to_f[d["dtype"]])
          if d["ptype"] in ["simple"]:
            filestring+=self._setter_string.format(d["short"],py_to_f[d["dtype"]])
            filestring+=self._getter_string.format(d["short"],py_to_f[d["dtype"]])
          if d["ptype"] in ["vector"]:
            filestring+=self._vector_setter_string.format(d["short"],py_to_f[d["dtype"]])
            filestring+=self._vector_getter_string.format(d["short"],py_to_f[d["dtype"]])
    
        return filestring


    def generate_getters_setters(self,filename="getter_setters.f90"):
        filestring=""
        #~ filestring+=input_grid_string(_unstructured_input_grid_template)
        #~ filestring+=input_grid_string(_regular_input_grid_template)
        filestring+=self.parameter_getter_setters()
        with open(filename,"w") as f:
            f.write(filestring)

    def generate_interface_functions(self):
        output=""
        for par,d in self.parameter_definition.iteritems():
            dtype=d["dtype"]
            if hasattr(d["default"],"unit"):
              unit=d["default"].unit.reference_string()
            else:
              unit="None"
            short=d["short"]
            ptype=d["ptype"]
            if ptype in ["ro"]:
              output+=("@legacy_function\ndef get_"+short+"():\n  function = LegacyFunctionSpecification()\n"
                   "  function.addParameter('"+short+"', dtype='"+dtype+"', direction=function.OUT, unit="+unit+")\n"
                   "  function.result_type = 'int32'\n  return function\n")
            if ptype in ["simple"]:
              output+=("@legacy_function\ndef get_"+short+"():\n  function = LegacyFunctionSpecification()\n"
                   "  function.addParameter('"+short+"', dtype='"+dtype+"', direction=function.OUT, unit="+unit+")\n"
                   "  function.result_type = 'int32'\n  return function\n")
              output+=("@legacy_function\ndef set_"+short+"():\n  function = LegacyFunctionSpecification()\n"
                   "  function.addParameter('"+short+"', dtype='"+dtype+"', direction=function.IN, unit="+unit+")\n"
                   "  function.result_type = 'int32'\n  return function\n")
            if ptype in ["vector"]:
              output+=("@legacy_function\ndef get_"+short+"():\n  function = LegacyFunctionSpecification()\n"
                   "  function.addParameter('i', dtype='i', direction=function.IN)\n"
                   "  function.addParameter('"+short+"', dtype='"+dtype+"', direction=function.OUT, unit="+unit+")\n"
                   "  function.can_handle_array=True\n"
                   "  function.result_type = 'int32'\n  return function\n")
              output+=("@legacy_function\ndef set_"+short+"():\n  function = LegacyFunctionSpecification()\n"
                   "  function.addParameter('i', dtype='i', direction=function.IN)\n"
                   "  function.addParameter('"+short+"', dtype='"+dtype+"', direction=function.IN, unit="+unit+")\n"
                   "  function.can_handle_array=True\n"
                   "  function.result_type = 'int32'\n  return function\n")
              length=d["length"]
              output+=( "def get_"+short+"_range(self):\n" + (
                    ("  return 1," + str(length)) if isinstance(length, int) else
                    ("  return 1, self.get_"+length+"()['"+length+"']\n")  )
                    )
        return output

    def generate_parameter_definitions(self, object):      
        for name,d in self.parameter_definition.items():
            short=d["short"]
            ptype=d["ptype"]
            dtype=d["dtype"]
            getter="get_"+short
            if ptype in ["simple","normal","vector"]:
              setter="set_"+short
            else:
              setter=None
            range_method="get_"+short+"_range"
            if ptype in ["simple", "normal", "ro"]:
              if dtype!='bool':
                  object.add_method_parameter(
                      getter,
                      setter,
                      name,
                      d["description"], 
                      d["default"]
                  )
              else:
                  object.add_boolean_parameter(
                      getter,
                      setter,
                      name,
                      d["description"], 
                      d["default"]
                  )
            else:
              object.add_array_parameter(
                      getter,
                      setter,
                      range_method, 
                      name,
                      d["description"]
                  )
