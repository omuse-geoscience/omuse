from omuse.units import units

parameters = (

  dict(name='Program', group_name='model', short='Program', dtype='str', default='D-Flow FM', description='unknown parameter read from gtsm_fine.mdu', ptype='ini'),
  dict(name='Version', group_name='model', short='Version', dtype='str', default='1.1.86.31179M', description='unknown parameter read from gtsm_fine.mdu', ptype='ini'),
  dict(name='AutoStart', group_name='model', short='AutoStart', dtype='int', default=0, description='Autostart simulation after loading MDU or not (0=no, 1=autostart, 2=autostartstop).', ptype='ini'),
#
  dict(name='NetFile', group_name='geometry', short='NetFile', dtype='str', default='step11_global_net.nc', description='*_net.nc', ptype='ini'),
  dict(name='BathymetryFile', group_name='geometry', short='BathymetryFile', dtype='str', default='', description='*.xyb', ptype='ini'),
  dict(name='WaterLevIniFile', group_name='geometry', short='WaterLevIniFile', dtype='str', default='', description='Initial water levels sample file *.xyz', ptype='ini'),
  dict(name='DryPointsFile', group_name='geometry', short='DryPointsFile', dtype='str', default='illegalcells.pol', description='Dry points file *.xyz (third column dummy z values), or dry areas polygon file *.pol (third column 1/-1: inside/outside)', ptype='ini'),
  dict(name='LandBoundaryFile', group_name='geometry', short='LandBoundaryFile', dtype='str', default='world.ldb', description='Only for plotting', ptype='ini'),
  dict(name='ThinDamFile', group_name='geometry', short='ThinDamFile', dtype='str', default='', description='*_thd.pli, Polyline(s) for tracing thin dams.', ptype='ini'),
  dict(name='ThindykeFile', group_name='geometry', short='ThindykeFile', dtype='str', default='', description='*_tdk.pli, Polyline(s) x,y,z, z = thin dyke top levels', ptype='ini'),
  dict(name='ProflocFile', group_name='geometry', short='ProflocFile', dtype='str', default='', description='*_proflocation.xyz)    x,y,z, z = profile refnumber', ptype='ini'),
  dict(name='ProfdefFile', group_name='geometry', short='ProfdefFile', dtype='str', default='', description='*_profdefinition.def) definition for all profile nrs', ptype='ini'),
  dict(name='ManholeFile', group_name='geometry', short='ManholeFile', dtype='str', default='', description='*...', ptype='ini'),
  dict(name='WaterLevIni', group_name='geometry', short='WaterLevIni', dtype='float', default=0.0, description='Initial water level', ptype='ini'),
  dict(name='Bedlevuni', group_name='geometry', short='Bedlevuni', dtype='float', default=-5.0, description='Uniform bottom level, (only if bedlevtype>=3, used at missing z values in netfile', ptype='ini'),
  dict(name='BedlevType', group_name='geometry', short='BedlevType', dtype='int', default=3, description='1 : Bottom levels at waterlevel cells (=flow nodes), like tiles xz, yz, bl , bob = max(bl left, bl right)', ptype='ini'),
  dict(name='PartitionFile', group_name='geometry', short='PartitionFile', dtype='str', default='', description='*_part.pol, polyline(s) x,y', ptype='ini'),
  dict(name='AngLat', group_name='geometry', short='AngLat', dtype='float', default=0.0 | units.deg, description='Angle of latitude (deg), 0=no Coriolis', ptype='ini'),
  dict(name='Conveyance2D', group_name='geometry', short='Conveyance2D', dtype='int', default=2, description='-1:R=HU,0:R=H, 1:R=A/P, 2:K=analytic-1D conv, 3:K=analytic-2D conv', ptype='ini'),
  dict(name='Makeorthocenters', group_name='geometry', short='Makeorthocenters', dtype='bool', default=False, description='1=yes, 0=no switch from circumcentres to orthocentres in geominit', ptype='ini'),
# check parameter as description does not correlate with the default value
#  dict(name='Dcenterinside', group_name='geometry', short='Dcenterinside', dtype='float', default='1000.', description='limit cell center; 1.0:in cell <-> 0.0:on c/g', ptype='ini'),
  dict(name='BaMin', group_name='geometry', short='BaMin', dtype='float', default=0.0, description='minimum cell area after cut-cell procedure', ptype='ini'),
#
  dict(name='CFLMax', group_name='numerics', short='CFLMax', dtype='float', default=0.7, description='Max. Courant nr.', ptype='ini'),
  dict(name='CFLWaveFrac', group_name='numerics', short='CFLWaveFrac', dtype='float', default=0.1, description='Wave velocity fraction, total courant vel = u + cflw*wavevelocity', ptype='ini'),
  dict(name='AdvecType', group_name='numerics', short='AdvecType', dtype='int', default=3, description='Adv type, 0=no, 1= Wenneker, qu-udzt, 2=1, q(uio-u), 3=Perot q(uio-u), 4=Perot q(ui-u), 5=Perot q(ui-u) without itself', ptype='ini'),
  dict(name='TimeStepType', group_name='numerics', short='TimeStepType', dtype='int', default=2, description='0=only transport, 1=transport + velocity update, 2=full implicit step_reduce, 3=step_jacobi, 4=explicit', ptype='ini'),
  dict(name='Limtypmom', group_name='numerics', short='Limtypmom', dtype='int', default=0, description='Limiter type for cell center advection velocity, 0=no, 1=minmod,2=vanLeer,3=Kooren,4=Monotone Central', ptype='ini'),
  dict(name='Limtypsa', group_name='numerics', short='Limtypsa', dtype='int', default=0, description='Limiter type for salinity transport,           0=no, 1=minmod,2=vanLeer,3=Kooren,4=Monotone Central', ptype='ini'),
  dict(name='Icgsolver', group_name='numerics', short='Icgsolver', dtype='int', default=4, description='Solver type , 1 = sobekGS_OMP, 2 = sobekGS_OMPthreadsafe, 3 = sobekGS, 4 = sobekGS + Saadilud, 5 = parallel/global Saad, 6 = parallel/Petsc, 7 = parallel/GS', ptype='ini'),
  dict(name='Maxdegree', group_name='numerics', short='Maxdegree', dtype='int', default=6, description='Maximum degree in Gauss elimination', ptype='ini'),
  dict(name='Tlfsmo', group_name='numerics', short='Tlfsmo', dtype='float', default=0.0 | units.s, description='Fourier smoothing time on waterlevel boundaries (s)', ptype='ini'),
  dict(name='jasfer3D', group_name='numerics', short='jasfer3D', dtype='int', default=1, description='unknown parameter read from gtsm_fine.mdu', ptype='ini'),
  dict(name='Slopedrop2D', group_name='numerics', short='Slopedrop2D', dtype='float', default=0.3, description='Apply droplosses only if local bottom slope > Slopedrop2D, 0=no droplosses', ptype='ini'),
  dict(name='Noderivedtypes', group_name='numerics', short='Noderivedtypes', dtype='int', default=0, description='unknown parameter read from gtsm_fine.mdu', ptype='ini'),
#
  dict(name='UnifFrictCoef', group_name='physics', short='UnifFrictCoef', dtype='float', default=62.651, description='Uniform friction coefficient, 0=no friction', ptype='ini'),
  dict(name='UnifFrictType', group_name='physics', short='UnifFrictType', dtype='int', default=0, description='0=Chezy, 1=Manning, 2=White Colebrook, 3=z0 etc', ptype='ini'),
  dict(name='UnifFrictCoef1D', group_name='physics', short='UnifFrictCoef1D', dtype='int', default=50, description='Uniform friction coefficient in 1D links, 0=no friction', ptype='ini'),
  dict(name='UnifFrictCoefLin', group_name='physics', short='UnifFrictCoefLin', dtype='float', default=0.0 | units.m/units.s, description='Uniform linear friction coefficient for ocean models (m/s), 0=no', ptype='ini'),
  dict(name='Vicouv', group_name='physics', short='Vicouv', dtype='float', default=25.0 | units.m**2/units.s, description='Uniform horizontal eddy viscosity (m2/s)', ptype='ini'),
  dict(name='Dicouv', group_name='physics', short='Dicouv', dtype='float', default=0.0 | units.m**2/units.s, description='Uniform horizontal eddy diffusivity (m2/s)', ptype='ini'),
  dict(name='Smagorinsky', group_name='physics', short='Smagorinsky', dtype='float', default=0.0, description='Add Smagorinsky horizontal turbulence : vicu = vicu + ( (Smagorinsky*dx)**2)*S, e.g. 0.1', ptype='ini'),
  dict(name='Elder', group_name='physics', short='Elder', dtype='bool', default=False, description='Add Elder contribution                : vicu = vicu + Elder*kappa*ustar*H/6),   e.g. 1.0', ptype='ini'),
  dict(name='irov', group_name='physics', short='irov', dtype='int', default=0, description='0=free slip, 1 = partial slip using wall_ks', ptype='ini'),
  dict(name='wall_ks', group_name='physics', short='wall_ks', dtype='float', default=0.0, description='Nikuradse roughness for side walls, wall_z0=wall_ks/30', ptype='ini'),
  dict(name='Rhomean', group_name='physics', short='Rhomean', dtype='float', default=1024.0164 | units.kg/units.m**3, description='Average water density (kg/m3)', ptype='ini'),
  dict(name='Ag', group_name='physics', short='Ag', dtype='float', default=9.81 | units.m/units.s**2, description='Gravitational acceleration', ptype='ini'),
  dict(name='TidalForcing', group_name='physics', short='TidalForcing', dtype='bool', default=True, description='Tidal forcing (0=no, 1=yes) (only for jsferic == 1)', ptype='ini'),
  dict(name='SelfAttractionLoading', group_name='physics', short='SelfAttractionLoading', dtype='bool', default=True, description='Add SAL term 1=yes', ptype='ini'),
  dict(name='SelfAttractionLoading_correct_wl_with_ini', group_name='physics', short='SelfAttractionLoading_correct_wl_with_ini', dtype='int', default=1, description='unknown parameter read from gtsm_fine.mdu', ptype='ini'),
  dict(name='Salinity', group_name='physics', short='Salinity', dtype='bool', default=False, description='Include salinity, (0=no, 1=yes)', ptype='ini'),
  dict(name='ITcap', group_name='physics', short='ITcap', dtype='int', default=1, description='unknown parameter read from gtsm_fine.mdu', ptype='ini'),
#
  dict(name='ICdtyp', group_name='wind', short='ICdtyp', dtype='int', default=4, description='( ),1=const, 2=S&B 2 breakpoints, 3= S&B 3 breakpoints, 4=Charnock constant', ptype='ini'),
  dict(name='Cdbreakpoints', group_name='wind', short='Cdbreakpoints', dtype='float', default=0.041, description='( ),   e.g. 0.00063  0.00723', ptype='ini'),
  dict(name='Windspeedbreakpoints', group_name='wind', short='Windspeedbreakpoints', dtype='str', default='0. 100.', description='(m/s), e.g. 0.0      100.0', ptype='ini'),
  dict(name='Rhoair', group_name='wind', short='Rhoair', dtype='float', default=1.20000004768372 | units.kg/units.m**3, description='Air density (kg/m3)', ptype='ini'),
  dict(name='PavBnd', group_name='wind', short='PavBnd', dtype='float', default=101325.0 | units.N/units.m**2 , description='Average air Pressure on open boundaries, (N/m2), only applied if value > 0', ptype='ini'),
  dict(name='Gapres', group_name='wind', short='Gapres', dtype='float', default=101325.0 | units.N/units.m**2, description='Global Atmospheric Pressure, (N/m2)', ptype='ini'),
#
  dict(name='RefDate', group_name='time', short='RefDate', dtype='str', default=20491216, description='Reference date (yyyymmdd)', ptype='ini'),
  dict(name='Tunit', group_name='time', short='Tunit', dtype='str', default='H', description='Time units in MDU (H, M or S)', ptype='ini'),
  dict(name='DtUser', group_name='time', short='DtUser', dtype='float', default=300. | units.s, description='User timestep in seconds (interval for external forcing update & his/map output)', ptype='ini'),
  dict(name='DtMax', group_name='time', short='DtMax', dtype='float', default=150.0 | units.s, description='Max timestep in seconds', ptype='ini'),
  dict(name='DtInit', group_name='time', short='DtInit', dtype='float', default=10.0 | units.s, description='Initial timestep in seconds', ptype='ini'),
  dict(name='AutoTimestep', group_name='time', short='AutoTimestep', dtype='bool', default=True, description='Use CFL timestep limit or not (1/0)', ptype='ini'),
  dict(name='TStart', group_name='time', short='TStart', dtype='float', default=0.0, description='Start time w.r.t. RefDate (in TUnit)', ptype='ini'),
  dict(name='TStop', group_name='time', short='TStop', dtype='float', default=1104.0, description='Stop  time w.r.t. RefDate (in TUnit)', ptype='ini'),
#
  dict(name='RestartFile', group_name='restart', short='RestartFile', dtype='str', default='', description='Restart file, only map, hence: *_map.nc', ptype='ini'),
  dict(name='RestartDateTime', group_name='restart', short='RestartDateTime', dtype='str', default='', description='Restart time (YYYYMMDDHHMMSS)', ptype='ini'),
#
  dict(name='ExtForceFile', group_name='external forcing', short='ExtForceFile', dtype='str', default='gtsm_fine.ext', description='*.ext', ptype='ini'),
#
  dict(name='OutputDir', group_name='output', short='OutputDir', dtype='str', default='output', description='Output directory of map-, his-, rst-, dat- and timings-files, default: DFM_OUTPUT_<modelname>. Set to . for no dir/current dir.', ptype='ini'),
  dict(name='ObsFile', group_name='output', short='ObsFile', dtype='str', default='selected_output.xyn', description='*.xyn Coords+name of observation stations.', ptype='ini'),
  dict(name='FouFile', group_name='output', short='FouFile', dtype='str', default='fourier_mmm.fou', description='unknown parameter read from gtsm_fine.mdu', ptype='ini'),
  dict(name='CrsFile', group_name='output', short='CrsFile', dtype='str', default='', description='*_crs.pli Polyline(s) definining cross section(s).', ptype='ini'),
  dict(name='HisInterval', group_name='output', short='HisInterval', dtype='float', default=600.0 | units.s, description='History output, given as "interval" "start period" "end period" (s)', ptype='ini'),
  dict(name='XLSInterval', group_name='output', short='XLSInterval', dtype='float', default=0.0 | units.s, description='Interval (s) between XLS history', ptype='ini'),
  dict(name='FlowGeomFile', group_name='output', short='FlowGeomFile', dtype='str', default='', description='*_flowgeom.nc Flow geometry file in NetCDF format.', ptype='ini'),
  dict(name='MapInterval', group_name='output', short='MapInterval', dtype='float', default=864000 | units.s, description='Map file output, given as "interval" "start period" "end period" (s)', ptype='ini'),
  dict(name='MapFormat', group_name='output', short='MapFormat', dtype='int', default=1, description='Map file format, 1: netCDF, 2: Tecplot, 3: netCFD and Tecplot', ptype='ini'),
  dict(name='RstInterval', group_name='output', short='RstInterval', dtype='float', default=0.0 | units.s, description='Interval (s) between restart file outputs', ptype='ini'),
  dict(name='WaqInterval', group_name='output', short='WaqInterval', dtype='float', default=0.0 | units.s, description='Interval (in s) between Delwaq file outputs', ptype='ini'),
  dict(name='StatsInterval', group_name='output', short='StatsInterval', dtype='float', default=3600.0 | units.s, description='Interval (in s) between simulation statistics output.', ptype='ini'),
  dict(name='TimingsInterval', group_name='output', short='TimingsInterval', dtype='float', default=0.0, description='Timings output interval', ptype='ini'),
  dict(name='TimeSplitInterval', group_name='output', short='TimeSplitInterval', dtype='str', default='0X', description="Time splitting interval, after which a new output file is started. value+unit, e.g. '1 M', valid units: Y,M,D,h,m,s.", ptype='ini'),
  dict(name='MapOutputTimeVector', group_name='output', short='MapOutputTimeVector', dtype='str', default='', description='File (.mpt) containing fixed map output times (s) w.r.t. RefDate', ptype='ini'),
  dict(name='FullGridOutput', group_name='output', short='FullGridOutput', dtype='bool', default=False, description='0:compact, 1:full time-varying grid data', ptype='ini'),
  dict(name='Wrimap_waterlevel_s0', group_name='output', short='Wrimap_waterlevel_s0', dtype='bool', default=False, description='Write water levels for previous time step to map file (1: yes, 0: no)', ptype='ini'),
  dict(name='Wrimap_waterlevel_s1', group_name='output', short='Wrimap_waterlevel_s1', dtype='bool', default=True, description='Write water levels to map file (1: yes, 0: no)', ptype='ini'),
  dict(name='Wrimap_velocity_component_u0', group_name='output', short='Wrimap_velocity_component_u0', dtype='bool', default=False, description='Write velocity component for previous time step to map file (1: yes, 0: no)', ptype='ini'),
  dict(name='Wrimap_velocity_component_u1', group_name='output', short='Wrimap_velocity_component_u1', dtype='bool', default=False, description='Write velocity component to map file (1: yes, 0: no)', ptype='ini'),
  dict(name='Wrimap_velocity_vector', group_name='output', short='Wrimap_velocity_vector', dtype='bool', default=True, description='Write cell-center velocity vectors to map file (1: yes, 0: no)', ptype='ini'),
  dict(name='Wrimap_upward_velocity_component', group_name='output', short='Wrimap_upward_velocity_component', dtype='bool', default=False, description='Write upward velocity component on cell interfaces (1: yes, 0: no)', ptype='ini'),
  dict(name='Wrimap_density_rho', group_name='output', short='Wrimap_density_rho', dtype='bool', default=False, description='Write flow density to map file (1: yes, 0: no)', ptype='ini'),
  dict(name='Wrimap_horizontal_viscosity_viu', group_name='output', short='Wrimap_horizontal_viscosity_viu', dtype='bool', default=False, description='Write horizontal viscosity to map file (1: yes, 0: no)', ptype='ini'),
  dict(name='Wrimap_horizontal_diffusivity_diu', group_name='output', short='Wrimap_horizontal_diffusivity_diu', dtype='bool', default=False, description='Write horizontal diffusivity to map file (1: yes, 0: no)', ptype='ini'),
  dict(name='Wrimap_flow_flux_q1', group_name='output', short='Wrimap_flow_flux_q1', dtype='bool', default=False, description='Write flow flux to map file (1: yes, 0: no)', ptype='ini'),
  dict(name='Wrimap_spiral_flow', group_name='output', short='Wrimap_spiral_flow', dtype='bool', default=False, description='Write spiral flow to map file (1: yes, 0: no)', ptype='ini'),
  dict(name='Wrimap_numlimdt', group_name='output', short='Wrimap_numlimdt', dtype='bool', default=False, description='Write the number times a cell was Courant limiting to map file (1: yes, 0: no)', ptype='ini'),
  dict(name='Wrimap_taucurrent', group_name='output', short='Wrimap_taucurrent', dtype='bool', default=False, description='Write the shear stress to map file (1: yes, 0: no)', ptype='ini'),
  dict(name='Wrimap_chezy', group_name='output', short='Wrimap_chezy', dtype='bool', default=False, description='Write the chezy roughness to map file (1: yes, 0: no)', ptype='ini'),
  dict(name='Wrimap_turbulence', group_name='output', short='Wrimap_turbulence', dtype='bool', default=False, description='Write vicww, k and eps to map file (1: yes, 0: no)', ptype='ini'),
  dict(name='Wrimap_wind', group_name='output', short='Wrimap_wind', dtype='bool', default=True, description='Write wind velocities to map file (1: yes, 0: no)', ptype='ini'),
  dict(name='EulerVelocities', group_name='output', short='EulerVelocities', dtype='bool', default=False, description='Euler velocities output (0: GLM, 1: Euler velocities)', ptype='ini'),
)
    
